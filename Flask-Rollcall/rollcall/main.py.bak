from flask import Flask
from flask import request, Response, abort, redirect, url_for, send_from_directory, session
from flask_sqlalchemy import SQLAlchemy
import os, random, string, binascii, json, pymysql, xlrd
from Cryptodome.Cipher import AES
import model
app = Flask(__name__)

# 配置flask配置对象中键：SQLALCHEMY_DATABASE_URI
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:1234qwer@localhost:3306/flask'

# 配置flask配置对象中键：SQLALCHEMY_COMMIT_TEARDOWN,设置为True,应用会自动在每次请求结束后提交数据库中变动
app.config['SQLALCHEMY_COMMIT_TEARDOWN'] = True
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True
app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN'] = True

# 获取SQLAlchemy实例对象，接下来就可以使用对象调用数据
db = SQLAlchemy(app)

# session
app.config['SECRET_KEY'] = '5ff18140047ab1302b1928f36ee04250'

APPID = 'd412b3d1c0f03d03'
APPSECRET = '5ff18140047ab1302b1928f36ee04250'

@app.route('/')
def index():
    # 获得请求数据
    verify_request = request.args.get('verify_request')
    yb_uid = request.args.get('yb_uid')
    # 解密数据
    postStr = binascii.unhexlify(verify_request)
    decryptor = AES.new(APPSECRET.encode('utf-8'), AES.MODE_CBC, APPID.encode('utf-8'))
    info = json.loads(''.join([decryptor.decrypt(postStr).decode().strip().rsplit('}', 1)[0], '}']))
    # 跳转授权界面
    if info['visit_oauth'] == False:
        return redirect('https://oauth.yiban.cn/code/html?client_id=' + APPID + '&redirect_uri=http://f.yiban.cn/iapp257395')
    session['token'] = info['visit_oauth']['access_token']
    session['uid'] = yb_uid
    return str(session)

@app.route('/identify', methods = ['POST'])
def identify():
    image = request.files['file']
    # todo
    return 'identify'

@app.route('/login')
def login():

    return '0';

@app.route('/api/tch/manage')
def tchManage():
    tch = Teacher.query.filter_by(id = int(session.get('id'))).first()
    if not tch:
        return 'error'
    classes = {}
    classes["id"] = tch.id
    classes["classes"] = tch.classes.split(',') 
    return str(classes)

@app.route('/api/tch/import', methods = ['GET', 'POST'])
def tchImport():
    if request.method == 'POST':
        # 取得并暂时保存文件
        file = request.files['file']
        className = session.get('id') + '_' + file.filename
        file.save('./tmp/' + className)
        # 读取文件数据并写入数据库
        table = xlrd.open_workbook('./tmp/' + className).sheets()[0]
        stus = [table.cell_value(i, 0) for i in range(table.nrows)]
        # 判断班级是否已存在
        if Class.query.filter_by(name = className.replace('.xls', '')).first():
            return 'Fail'
        # 创建班级信息
        classInfo = Class(className.replace('.xls', ''), ','.join(stus), 0)
        db.session.add(classInfo)
        db.session.commit()
        # 向教师数据条目追加班级
        tch = Teacher.query.filter_by(id = int(session.get('id'))).first()
        classes = tch.classes.split(',')
        if (not tch) or className.replace('.xls', '') in classes:
            return 'Fail'
        classes.append(className.replace('.xls', ''))
        tch.classes = ','.join(filter(None, classes))
        db.session.commit()
        # 删除文件
        os.remove('./tmp/' + session.get('id') + '_' + file.filename)
        return 'Success'

    return '''
    <!doctype html>
    <title>Upload new File</title>
    <h1>Upload new File</h1>
    <form method=post enctype=multipart/form-data>
      <input type=file name=file>
      <input type=submit value=Upload>
    </form>
    '''

@app.route('/api/tch/modify', methods = ['POST'])
def tchModify():
    className = request.form['classname']
    stus = request.form['stus']
    classInfo = Class.query.filter_by(classname = className).first()
    if not classInfo:
        return 'error'
    classInfo.stus = stus
    db.session.commit()
    return 'success'

@app.route('/api/tch/rollcall')
def tchRollcall():
    className = request.args.get('classname')
    # 获得班级信息
    classInfo = Class.query.filter_by(name = className).first()
    classInfo.times += 1    # 已点名次数+1
    # 新增一个点名
    rollId = ''.join([random.choice(string.digits + string.ascii_letters) for i in range(12)])
    roll = Rollcall(rollId, className, classInfo.times, '')
    db.session.add(roll)
    # 设置点名
    tch = Teacher.query.filter_by(id = int(session.get('id'))).first()
    tch.curroll = rollId
    db.session.commit()
    return rollId


if __name__ == '__main__':
    app.debug = True
    app.run()